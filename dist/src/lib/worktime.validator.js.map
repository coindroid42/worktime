{"version":3,"file":"worktime.validator.js","sourceRoot":"src/","sources":["src/lib/worktime.validator.ts"],"names":[],"mappings":"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","sourcesContent":["import { formatDate, isDate } from './formatDate';\r\nimport { TimeZoneIdentifier } from './tz';\r\n\r\n/**\r\n * Базовые данные о времени работы - служебный интерфейс.\r\n */\r\ninterface WorkTimeBase {\r\n  /** время начала рабочего дня*/\r\n  start: string;\r\n\r\n  /** время окончания рабочего дня*/\r\n  stop: string;\r\n\r\n  /** перерыв на обед*/\r\n  break: string;\r\n}\r\n\r\n/**\r\n * Информация о времени работы предприятия - служебный интерфейс.\r\n */\r\ninterface WorkTime extends WorkTimeBase {\r\n  /** день недели, к которому применяется это время доставки   */\r\n  dayOfWeek: string | string[];\r\n\r\n  /** ограничения по времени работы для самовывоза */\r\n  selfService: WorkTimeBase;\r\n}\r\n\r\n/**\r\n * Интерфейс объекта, получаемого от API @webresto/core и содержащего текущие данные о рабочем времени предприятия\r\n */\r\ninterface RestrictionsOrder {\r\n  /** минимальное время доставки*/\r\n  minDeliveryTime: string;\r\n\r\n  /**установлено ли на текущий момент ограничение доставки на определенное время */\r\n  deliveryToTimeEnabled?: boolean;\r\n\r\n  /** ограничение максимальной даты заказа в будущем (в минутах)*/\r\n  periodPossibleForOrder: number;\r\n\r\n  /** временная зона предприятия */\r\n  timezone: string;\r\n\r\n  /**  массив ограничений по времени работы предприятия для разных дней недели. */\r\n  workTime: WorkTimeBase[];\r\n}\r\n\r\n/**\r\n * Функция валидации переданного объекта restriction на соответствие интерфейсу RestrictionsOrder\r\n * @param restriction - объект, содержащий информацию о рабочем времени предприятия и ограничениях даты/времени доставки.\r\n */\r\nfunction isValidRestrictionOrder(restriction: any): restriction is RestrictionsOrder {\r\n  return 'minDeliveryTime' in restriction && 'periodPossibleForOrder' in restriction && 'timezone' in restriction && 'workTime' in restriction;\r\n}\r\n\r\n/**\r\n * Класс, содержащий статические методы, необходимые для работы с ограничениями рабочего времени предприятия.\r\n * Создавать новый объект этого класса для использования методов не требуется.\r\n */\r\nexport class WorkTimeValidator {\r\n\r\n  /**\r\n   * Метод возвращает максимальную возможную дату, на которую можно заказать доставку.\r\n   * @param restriction - объект, содержащий информацию о рабочем времени предприятия и ограничениях даты/времени доставки.\r\n   * @return :string - Строка, представляющая максимальную доступную дату доставки в формате yyyy-MM-dd.\r\n   */\r\n  static getMaxOrderDate(restriction: RestrictionsOrder, currentdate: Date): string {\r\n    if (restriction && isValidRestrictionOrder(restriction) && isDate(currentdate)) {\r\n      return formatDate(currentdate.getTime() + restriction.periodPossibleForOrder * 60000, 'yyyy-MM-dd', 'en');\r\n    } else {\r\n      throw new Error(\r\n        isDate(currentdate) ?\r\n          'Не передан корректный объект даты' :\r\n          !restriction ? 'Не передан объект restrictions' :\r\n            'Передан невалидный обьект restrictions'\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Метод считает, сколько минут от начала дня (00:00) прошло для переданного времени.\r\n   * @param time - строка в формате HH:mm - время.\r\n   * @return :number - кол-во минут.\r\n   */\r\n  static getTimeFromString(time: string): number {\r\n    if (!time) {\r\n      throw new Error('Не передана строка с преобразуемым временем в формате HH:mm');\r\n    } else {\r\n      let checkedTime = time.trim();\r\n      if (checkedTime.includes(' ') || checkedTime.includes('T')) {\r\n        checkedTime = checkedTime.split(checkedTime.includes(' ') ? ' ' : 'T')[1];\r\n      }\r\n      return (+checkedTime.split(':')[0]) * 60 + (+checkedTime.split(':')[1]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Метод проверяет, доступна ли возможность доставки на ближайшее время.\r\n   * @param restriction - объект, содержащий информацию о рабочем времени предприятия и ограничениях даты/времени доставки.\r\n   * @param currentdate - объект Date, представляющий локальные дату и время пользователя, для которых и проверяется возможность доставки\r\n   * @return Обьект, содержащий информацию:\r\n   * {\r\n        isWorkNow:boolean - Возможна ли доставка в ближайшее время\r\n        isNewDay:boolean - Служебный параметр для внутреннего использования.\r\n          Представляет признак, что из-за разницы часовых поясов расчет даты \"перепрыгнул\" на новый день.\r\n        currentTime:number - Служебный параметр для внутреннего использования.\r\n          Представляет проверяемое методом время в минутах от 00:00 в часовом поясе предприятия.\r\n        curentDayStartTime:number - Служебный параметр для внутреннего использования.\r\n          Представляет время начала рабочего дня в минутах от 00:00 в часовом поясе предприятия.\r\n        curentDayStopTime:number - Служебный параметр для внутреннего использования.\r\n          Представляет время окончания рабочего дня в минутах от 00:00 в часовом поясе предприятия.\r\n      }\r\n   */\r\n  static isWorkNow(restriction: RestrictionsOrder, currentdate: Date): {\r\n    workNow: boolean,\r\n    isNewDay: boolean,\r\n    currentTime: number,\r\n    curentDayStartTime: number,\r\n    curentDayStopTime: number\r\n  } {\r\n    if (!restriction || !isValidRestrictionOrder(restriction) || !isDate(currentdate)) {\r\n      throw new Error(\r\n        !isDate(currentdate) ? 'Не передан корректный объект даты' :\r\n          !restriction ? 'Не передан объект restrictions'\r\n            : 'Передан невалидный обьект restrictions');\r\n    } else {\r\n      const companyLocalTimeZone = TimeZoneIdentifier.getTimeZoneGMTOffsetfromNameZone(restriction.timezone).split(':');\r\n      const companyLocalTimeZoneDelta = +companyLocalTimeZone[0] * 60 + (+(companyLocalTimeZone[1]));\r\n      const lokalTimeDelta = companyLocalTimeZoneDelta + currentdate.getTimezoneOffset(); // смещение времени пользователя относительно времени торговой точки\r\n      const currentTimeInMinutesWithLocalDelta = WorkTimeValidator.getTimeFromString(formatDate(currentdate, 'HH:mm', 'en')) + lokalTimeDelta;\r\n      const currentTime = currentTimeInMinutesWithLocalDelta > 1440 ? currentTimeInMinutesWithLocalDelta - 1440 : currentTimeInMinutesWithLocalDelta;\r\n      /**\r\n       * текущее время в минутах с начала дня (600 = 10:00. 1200 = 20:00)\r\n       * если из-за разницы поясов расчет перепрыгнул на новый день, то приводим время к правильному значению в диапазоне 24 часов\r\n       * */\r\n      const currentDayWorkTime = WorkTimeValidator.getCurrentWorkTime(\r\n        restriction,\r\n        currentTimeInMinutesWithLocalDelta > 1440 ? new Date(currentdate.getTime() + 86400000) : currentdate\r\n      ); // текущее рабочее время\r\n      const curentDayStartTime = WorkTimeValidator.getTimeFromString(currentDayWorkTime.start); // текущее время начала рабочего дня в минутах\r\n      const curentDayStopTime = WorkTimeValidator.getTimeFromString(currentDayWorkTime.stop); // текущее время окончания рабочего дня в минутах\r\n      return {\r\n        workNow: currentTime < curentDayStopTime && currentTime > curentDayStartTime,\r\n        isNewDay: currentTimeInMinutesWithLocalDelta > 1440,\r\n        currentTime,\r\n        curentDayStartTime,\r\n        curentDayStopTime\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Метод возвращает ближайшую возможную дату-время заказа для способа доставки \"Доставка курьером\".\r\n   * @param restriction - объект, содержащий информацию о рабочем времени предприятия и ограничениях даты/времени доставки.\r\n   * @param currentdate - объект Date, представляющий текущие локальные дату и время пользователя\r\n   */\r\n  static getPossibleDelieveryOrderDateTime(restriction: RestrictionsOrder, currentdate: Date): string {\r\n    const checkTime = WorkTimeValidator.isWorkNow(restriction, currentdate);\r\n    if (checkTime.workNow) {\r\n      throw new Error('Сейчас рабочее время. Расчет не требуется.');\r\n    } else {\r\n      const currentDayWorkTime = WorkTimeValidator.getCurrentWorkTime(\r\n        restriction,\r\n        checkTime.isNewDay ? new Date(currentdate.getTime() + 86400000) : currentdate\r\n      );\r\n      const time = this.getTimeFromString(currentDayWorkTime.start) + (+restriction.minDeliveryTime) + 1;\r\n      const hour = Math.floor(time / 60);\r\n      const minutes = time - (hour * 60);\r\n      return formatDate(\r\n        checkTime.isNewDay || checkTime.currentTime > checkTime.curentDayStopTime ? (currentdate.getTime() + 86400000) : currentdate,\r\n        `yyyy-MM-dd ${hour <= 9 ? '0' + hour : hour}:${minutes <= 9 ? '0' + minutes : minutes}`,\r\n        'en');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Метод возвращает ближайшую возможную дату-время заказа для способа доставки \"Самовывоз\".\r\n   * @param restriction - объект, содержащий информацию о рабочем времени предприятия и ограничениях даты/времени доставки.\r\n   * @param currentdate - объект Date, представляющий текущие локальные дату и время пользователя\r\n   */\r\n  static getPossibleSelfServiceOrderDateTime(restriction: RestrictionsOrder, currentdate: Date): string {\r\n    /**\r\n     * Для обеспечения иммутабельности данных создается новый обьект restrictions, идентичный полученному в параметрах, но с измененным массивом workTime.\r\n     * В массиве workTime обновляются ограничения времени работы с обычных на актуальные для самовывоза.\r\n     * */\r\n    const newRestriction = {\r\n      ...restriction, workTime: (restriction.workTime as WorkTime[]).map(workTime => workTime.selfService)\r\n    };\r\n    return WorkTimeValidator.getPossibleDelieveryOrderDateTime(newRestriction, currentdate);\r\n  }\r\n\r\n  /**\r\n  * Метод возвращает актуальные данные о времени работы из массива всех вариантов обьекта restriction.\r\n  * @param restriction - объект, содержащий информацию о рабочем времени предприятия и ограничениях даты/времени доставки.\r\n  * @param currentdate - объект Date, представляющий текущие локальные дату и время пользователя\r\n  */\r\n  static getCurrentWorkTime(restriction: RestrictionsOrder, currentdate: Date): WorkTimeBase | WorkTime {\r\n    let i = 0;\r\n    let result = null;\r\n    while (i < restriction.workTime.length && !result) {\r\n      if ((restriction.workTime[i] as WorkTime).dayOfWeek === 'all' ||\r\n        (restriction.workTime[i] as WorkTime).dayOfWeek.includes(\r\n          formatDate(currentdate, 'EEEE', 'en').toLowerCase()\r\n        )) {\r\n        result = restriction.workTime[i];\r\n      }\r\n      i += 1;\r\n    }\r\n    if (!result) {\r\n      throw new Error('Нет актуального расписания работы для текущего дня');\r\n    } else {\r\n      return result;\r\n    }\r\n  }\r\n}\r\n"]}